#include <iostream>
#include <fstream>
#include <cstdlib>
#include <chrono>
typedef std::chrono::high_resolution_clock Clock;

using namespace std;
//The random number generator used to seed the entire test
class randnumgen
{
private:
    int num;

public:
    randnumgen(int n = 0)
    {
        num = n;
        srand((unsigned)time(0));
    }
    int generator()
    {
        return rand() % (2 * num) + 1;
    }
};
//Pring function for testing all the different algorithm
void printarr(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        if (i < n - 1)
            cout << arr[i] << " , ";
        else
            cout << arr[i] << endl;
    }
}
void heapify(int arr[], int n, int i)
{
    // Find largest among root, left child and right tree
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest])
        largest = left;

    if (right < n && arr[right] > arr[largest])
        largest = right;

    // Swap and continue heapifying if root is not largest
    if (largest != i)
    {
        //Swap using C++ libary because we didnt create a swap function then and was too lazy to make one when bug fixing
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}

// main function to do heap sort
void heapSort(int arr[], int n)
{
    // Build max heap
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    // Heap sort
    for (int i = n - 1; i >= 0; i--)
    {
        swap(arr[0], arr[i]);

        // Heapify root element to get highest element at root again
        heapify(arr, i, 0);
    }
}
//Swap function so dont have to use the same swapping method everytime
void swap(int *xp, int *yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}

// A function to implement bubble sort
void bubbleSort(int arr[], int n)
{
    int i, j;
    for (i = 0; i < n - 1; i++)

        //fairly easy to understand, just going through 2 elements then swapping as fit
        for (j = 0; j < n - i - 1; j++)
            if (arr[j] > arr[j + 1])
                swap(&arr[j], &arr[j + 1]);
}
//Function for insertion sorting
void insertionSort(int array[], int size)
{
    for (int i = 1; i < size; i++)
    {
        int key = array[i];
        int j = i - 1;

        // Getting a key then comparing it until it finds a smaller number
        while (key < array[j] && j >= 0)
        {
            array[j + 1] = array[j];
            --j;
        }
        array[j + 1] = key;
    }
}
// Merge two subarrays L and M into arr
void merge(int arr[], int p, int q, int r)
{

    // Splitting the main array into L and M going from p  to q then q-1 to r
    int n1 = q - p + 1;
    int n2 = r - q;

    int L[n1], M[n2];

    for (int i = 0; i < n1; i++)
        L[i] = arr[p + i];
    for (int j = 0; j < n2; j++)
        M[j] = arr[q + 1 + j];

    // Maintain current index of sub-arrays and main array
    int i, j, k;
    i = 0;
    j = 0;
    k = p;

    // Until we reach either end of either L or M, pick larger among the biggest element
    while (i < n1 && j < n2)
    {
        if (L[i] <= M[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = M[j];
            j++;
        }
        k++;
    }

    // When we run out of elements in either L or M, put back the remains to main array[q..r]
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2)
    {
        arr[k] = M[j];
        j++;
        k++;
    }
}

// Divide the array into two subarrays, sort them and merge them
void mergeSort(int arr[], int l, int r)
{
    if (l < r)
    {
        // m is the point where the array is divided into two subarrays
        int m = l + (r - l) / 2;

        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        // Merge the sorted subarrays
        merge(arr, l, m, r);
    }
}
int partition(int arr[], int low, int high)
{
    int pivot = arr[high]; //
    int i = (low - 1);     // Index of smaller element and indicates the right position of pivot found so far

    for (int j = low; j <= high - 1; j++)
    {
        // If current element is smaller than the pivot
        if (arr[j] < pivot)
        {
            i++; // increment index of smaller element
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

// Quick sort array, low = starting, and high = ending array
void quickSort(int arr[], int low, int high)
{
    if (low < high)
    {
        /* pi is partitioning index, arr[p] is now 
        at right place */
        int pi = partition(arr, low, high);

        //Divide and conquer, sort recursively
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

// Function to get the largest element from an array
int getMax(int array[], int n)
{
    int max = array[0];
    for (int i = 1; i < n; i++)
    {
        if (array[i] > max)
            max = array[i];
    }
    return max;
}

// Using counting sort to sort the elements in the basis of significant places specifically made for radix sort
void countS(int array[], int size, int place)
{
    const int max = 10;
    int output[size];
    int count[max];

    for (int i = 0; i < max; ++i)
        count[i] = 0;

    //Get the number of elements
    for (int i = 0; i < size; i++)
        count[(array[i] / place) % 10]++;

    //Get count++
    for (int i = 1; i < max; i++)
        count[i] += count[i - 1];

    // Place the elements in sorted order
    for (int i = size - 1; i >= 0; i--)
    {
        output[count[(array[i] / place) % 10] - 1] = array[i];
        count[(array[i] / place) % 10]--;
    }

    for (int i = 0; i < size; i++)
        array[i] = output[i];
}

// Main function to implement radix sort
void radixsort(int array[], int size)
{
    // Get maximum element
    int max = getMax(array, size);

    // Apply counting sort to sort elements based on place value.
    for (int place = 1; max / place > 0; place *= 10)
        countS(array, size, place);
}
void countSort(int array[], int size)
{
    int count[50001];
    int output[25000];
    int maxnum = getMax(array, size);
    //initializing the count array to count all instances of the int in the array
    for (int j = 0; j <= maxnum; j++)
    {
        count[j] = 0;
    }
    //count occurence of number in occurence
    for (int i = 0; i < size; i++)
    {
        count[array[i]]++;
    }
    //giving all the indices a position on the final output arr
    for (int i = 1; i <= maxnum; i++)
    {
        count[i] += count[i - 1];
    }
    //assigning back into the final arary;
    for (int i = size - 1; i >= 0; i--)
    {
        output[count[array[i]] - 1] = array[i];
        count[array[i]]--;
    }
    //reassigning all variable back to array
    for (int i = 0; i < size; i++)
    {
        array[i] = output[i];
    }
}

int main()
{
    //Code created by Huy Le, Du Nguyen, Nhat Phan and Huu Quang Nhat Nguyen
    int n = 25000;
    int arr[25000];
    randnumgen *Seedgen = new randnumgen(n);
    for (int i = 0; i < n; i++)
    {
        arr[i] = Seedgen->generator();
    }
    auto t1 = Clock::now();
    radixsort(arr, n);
    auto t2 = Clock::now();
    std::cout << "Total compilation time: "
              << std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count()
              << " nanoseconds" << std::endl;
    cout << "---------------------------\nend " << endl;
    return 0;
}
